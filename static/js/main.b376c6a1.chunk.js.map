{"version":3,"sources":["icons/babysteps.svg","icons/communicate.svg","icons/help.svg","icons/learn.svg","icons/motivation.svg","icons/mountable.svg","icons/status.svg","icons/users.svg","icons/work.svg","icons/index.js","components/CreedCard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","icons","babysteps","communicate","help","learn","motivation","mountable","status","users","work","noop","components_CreedCard","_ref","creed","onClick","react_default","a","createElement","style","height","CreedCard_CreedCard","CreedCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","stick","circle","icon","message","isRunning","runAnimation","_this2","staggers","querySelectorAll","tl","TimelineMax","onComplete","add","TweenMax","from","rotationY","opacity","scale","staggerFrom","ease","Power4","easeOut","_this3","colorStyle","backgroundColor","color","fontSize","text","split","length","className","ref","alt","src","msg","map","word","idx","keywords","includes","key","PureComponent","App","state","creeds","randomCreed","bind","assertThisInitialized","event","newCreed","Math","floor","random","setState","creedIndex","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b376c6a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/babysteps.522226bb.svg\";","module.exports = __webpack_public_path__ + \"static/media/communicate.f32a71cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/help.8ad391c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/learn.f8723ebf.svg\";","module.exports = __webpack_public_path__ + \"static/media/motivation.e62c819f.svg\";","module.exports = __webpack_public_path__ + \"static/media/mountable.1d792bc5.svg\";","module.exports = __webpack_public_path__ + \"static/media/status.65808170.svg\";","module.exports = __webpack_public_path__ + \"static/media/users.84a18e5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/work.1fa35345.svg\";","import babysteps from './babysteps.svg'\nimport communicate from './communicate.svg'\nimport help from './help.svg'\nimport learn from './learn.svg'\nimport motivation from './motivation.svg'\nimport mountable from './mountable.svg'\nimport status from './status.svg'\nimport users from './users.svg'\nimport work from './work.svg'\n\nexport default {\n  babysteps,\n  communicate,\n  help,\n  learn,\n  motivation,\n  mountable,\n  status,\n  users,\n  work\n};","import React, { PureComponent } from 'react';\nimport icons from '../../icons';\nimport './style.css';\nimport { Power4 } from 'gsap/EasePack';\nimport TweenMax from 'gsap/TweenMax';\nimport TimelineMax from 'gsap/TimelineMax';\n\nconst noop = () => (null)\n\n// just a little container/wrapper/hoc\nexport default ( { creed, onClick } ) => {\n  return (\n    <div style={{height: '40vh'}} onClick={ onClick || noop }>\n      <CreedCard creed={ creed } />\n    </div>\n  )\n}\n\nclass CreedCard extends PureComponent {\n  constructor ( props ) {\n    super( props );\n    this.stick = null;\n    this.circle = null;\n    this.icon = null;\n    this.message = null;\n    this.isRunning = false;\n  }\n\n  componentDidMount () {\n    this.runAnimation()\n  }\n  componentDidUpdate () {\n    this.runAnimation()\n  }\n  runAnimation () {\n    if ( this.isRunning ) {\n      return;\n    }\n    this.isRunning = true;\n    const staggers = this.message.querySelectorAll( 'span' );\n    const tl = new TimelineMax( { onComplete: () => this.isRunning = false } );\n    tl.add( TweenMax.from( this.stick, 0.3, { height: 0 } ) );\n    tl.add( TweenMax.from( this.circle, 0.3, { rotationY: 90 } ) );\n    tl.add([\n      TweenMax.from( this.icon, 0.5, { opacity: 0, scale: 2 } ),\n      TweenMax.from( this.message, 1, { scale: 0.9 } ),\n      TweenMax.staggerFrom( staggers, 0.8, { opacity: 0, ease: Power4.easeOut }, 0.1 )\n    ]);\n  }\n  render () {\n    const { creed } = this.props;\n    const colorStyle = {\n      backgroundColor: creed.color\n    }\n    const fontSize = {\n      fontSize: creed.text.split(' ').length < 10\n        ? 'calc(8vmin)'\n        : 'calc(6vmin)'\n    }\n\n    return (\n      <div className=\"creed-card\">\n        <div className=\"creed-side\">\n          <div\n            ref={ stick => this.stick = stick }\n            className=\"vertical-stick\"\n            style={ colorStyle } />\n          <div\n            ref={ circle => this.circle = circle }\n            className=\"circle\"\n            style={ colorStyle }>\n            <img\n              ref={ icon => this.icon = icon }\n              alt={ creed.icon }\n              src={ icons[ creed.icon ] } />\n          </div>\n        </div>\n        <div ref={ msg => this.message = msg } className=\"creed-text\" style={ fontSize }>\n        {\n          creed.text.split(' ').map( ( word, idx ) => {\n            return creed.keywords.includes( word )\n              ? <span key={ idx } className=\"keyword\">{ word } </span>\n              : <span key={ idx }>{ word } </span>\n          })\n        }\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { default as creeds } from './creeds.json';\nimport './App.css';\nimport CreedCard from './components/CreedCard'\n\nclass App extends Component {\n  constructor( props ) {\n    super( props );\n    this.state = {\n      creed: 0,\n    }\n    this.creeds = creeds\n    this.randomCreed = this.randomCreed.bind( this );\n  }\n  randomCreed( event ) {\n    let newCreed = this.state.creed;\n    while ( newCreed === this.state.creed ) {\n      newCreed = Math.floor( Math.random() * this.creeds.length );\n    }\n    this.setState({\n      creed: newCreed\n    });\n  }\n\n  render() {\n    let creedIndex = this.state.creed\n    return (\n      <div className=\"App\">\n        <CreedCard onClick={ this.randomCreed } creed={ this.creeds[ creedIndex ] } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}